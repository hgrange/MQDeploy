apiVersion: v1
kind: ConfigMap
metadata:
  name: mqtt-config
  namespace: NAMESPACE
data:
  script.mqsc: | 
    DEF SERVICE(SYSTEM.MQXR.SERVICE) +
    CONTROL(QMGR) +
    DESCR('Manages clients using MQXR protocols such as MQTT') SERVTYPE(SERVER) +
    STARTCMD('+MQ_INSTALL_PATH+/mqxr/bin/runMQXRService.sh') +
    STARTARG('-m +QMNAME+ -d "+MQ_Q_MGR_DATA_PATH+" -g "+MQ_DATA_PATH+" -sf "[DEFAULT]"') +
    STOPCMD('+MQ_INSTALL_PATH+/mqxr/bin/endMQXRService.sh') +
    STOPARG('-m +QMNAME+ -d "+MQ_Q_MGR_DATA_PATH+" -g "+MQ_DATA_PATH+"') +
    STDOUT('+MQ_Q_MGR_DATA_PATH+/mqxr.stdout') +
    STDERR('+MQ_Q_MGR_DATA_PATH+/mqxr.stderr')
    
    * DEFINE QLOCAL('SYSTEM.MQTT.TRANSMIT.QUEUE') USAGE(XMITQ) MAXDEPTH(100000)
    ALTER QMGR DEFXMITQ('SYSTEM.MQTT.TRANSMIT.QUEUE')
    SET AUTHREC PROFILE(SYSTEM.MQTT.TRANSMIT.QUEUE)  PRINCIPAL('mqtt') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    START SERVICE(SYSTEM.MQXR.SERVICE)
    
    DEFINE CHANNEL('MQTT') CHLTYPE(MQTT) PORT(1833) MCAUSER('mqtt')
    START CHANNEL('MQTT')

    DEFINE TOPIC(MQTT) TOPICSTR('#')  PUB(ENABLED) SUB(ENABLED)
    SET AUTHREC PROFILE(MQTT) PRINCIPAL('mqtt') OBJTYPE(TOPIC) AUTHADD(PUB,SUB)
    DEF QL(TO.KAFKA)
    DEFINE SUB(TO.KAFKA) DEST(TO.KAFKA) TOPICOBJ(MQTT) LIKE(SYSTEM.DEFAULT.SUB)
    
    DEFINE CHANNEL (APP1.CHAN) CHLTYPE (SVRCONN) TRPTYPE (TCP) SSLCAUTH(REQUIRED)  SSLCIPH('ANY_TLS13_OR_HIGHER') REPLACE
    SET CHLAUTH('APP1.CHAN') TYPE(SSLPEERMAP) SSLPEER('CN=*') USERSRC(NOACCESS) ACTION(REPLACE)
    SET CHLAUTH('APP1.CHAN') TYPE(SSLPEERMAP) SSLPEER('CN=app1') USERSRC(MAP) MCAUSER('app1') ACTION(REPLACE)
    SET CHLAUTH('APP1.CHAN') TYPE(SSLPEERMAP) SSLPEER('CN=MQTT') USERSRC(MAP) MCAUSER('app1') ACTION(REPLACE)
    
    DEFINE CHANNEL (KAFKA.SVRCONN) CHLTYPE (SVRCONN) TRPTYPE (TCP) SSLCAUTH(OPTIONAL) MCAUSER('kafka')  REPLACE

    DEFINE CHANNEL (SYSTEMMQTTCHL) CHLTYPE (SVRCONN) TRPTYPE (TCP) SSLCAUTH(REQUIRED)  SSLCIPH('ANY_TLS13_OR_HIGHER') REPLACE
    SET CHLAUTH('SYSTEMMQTTCHL') TYPE(SSLPEERMAP) SSLPEER('CN=*') USERSRC(NOACCESS) ACTION(REPLACE)
    SET CHLAUTH('SYSTEMMQTTCHL') TYPE(SSLPEERMAP) SSLPEER('CN=mqm') USERSRC(MAP) MCAUSER('mqm') ACTION(REPLACE)

    DEF QL(Q1)
    DEF QL(Q2)
    DEF QL(FROM.KAFKA)

    SET AUTHREC PRINCIPAL('app1') OBJTYPE(QMGR) AUTHADD(CONNECT,INQ)
    SET AUTHREC PROFILE(Q1) PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    SET AUTHREC PROFILE(Q2) PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    SET AUTHREC PROFILE(TO.KAFKA) PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    SET AUTHREC PROFILE(FROM.KAFKA) PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    
    SET AUTHREC PRINCIPAL('kafka') OBJTYPE(QMGR) AUTHADD(CONNECT,INQ)
    SET AUTHREC PROFILE(TO.KAFKA) PRINCIPAL('kafka') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    SET AUTHREC PROFILE(FROM.KAFKA) PRINCIPAL('kafka') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    REFRESH SECURITY
  qm-service-component.ini: |   
    ServiceComponent:
     Service=AuthorizationService
     Name=Dev.HtpAuth.Service
     Module=/opt/mqm/lib64/mqsimpleauth.so
     ComponentDataSize=0
    ServiceComponent:
     Service=AuthorizationService
     Name=MQSeries.UNIX.auth.service
     Module=amqzfu
     ComponentDataSize=0
     
  20-dev-tls.mqsc: |
  
  10-dev.mqsc: |
    * Developer queues
    DEFINE QLOCAL('DEV.QUEUE.1') REPLACE
    DEFINE QLOCAL('DEV.QUEUE.2') REPLACE
    DEFINE QLOCAL('DEV.QUEUE.3') REPLACE
    DEFINE QLOCAL('DEV.DEAD.LETTER.QUEUE') REPLACE
    DEFINE QMODEL('DEV.APP.MODEL.QUEUE') REPLACE

    * Use a different dead letter queue, for undeliverable messages
    ALTER QMGR DEADQ('DEV.DEAD.LETTER.QUEUE')

    * Developer topics
    DEFINE TOPIC('DEV.BASE.TOPIC') TOPICSTR('dev/') REPLACE

    * Developer connection authentication
    DEFINE AUTHINFO('DEV.AUTHINFO') AUTHTYPE(IDPWOS) CHCKCLNT(REQDADM) CHCKLOCL(OPTIONAL) ADOPTCTX(YES) REPLACE
    ALTER QMGR CONNAUTH('DEV.AUTHINFO')
    REFRESH SECURITY(*) TYPE(CONNAUTH)

    * Developer channels (Application + Admin)
    * Developer channels (Application + Admin)
    DEFINE CHANNEL('DEV.ADMIN.SVRCONN') CHLTYPE(SVRCONN) REPLACE
    DEFINE CHANNEL('DEV.APP.SVRCONN') CHLTYPE(SVRCONN) MCAUSER('app') REPLACE

    * Developer channel authentication rules
    SET CHLAUTH('*') TYPE(ADDRESSMAP) ADDRESS('*') USERSRC(NOACCESS) DESCR('Back-stop rule - Blocks everyone') ACTION(REPLACE)
    SET CHLAUTH('DEV.APP.SVRCONN') TYPE(ADDRESSMAP) ADDRESS('*') USERSRC(CHANNEL) CHCKCLNT(REQUIRED) DESCR('Allows connection via APP channel') ACTION(REPLACE)
    SET CHLAUTH('DEV.ADMIN.SVRCONN') TYPE(BLOCKUSER) USERLIST('nobody') DESCR('Allows admins on ADMIN channel') ACTION(REPLACE)
    SET CHLAUTH('DEV.ADMIN.SVRCONN') TYPE(USERMAP) CLNTUSER('admin') USERSRC(CHANNEL) DESCR('Allows admin user to connect via ADMIN channel') ACTION(REPLACE)
    SET CHLAUTH('DEV.ADMIN.SVRCONN') TYPE(USERMAP) CLNTUSER('admin') USERSRC(MAP) MCAUSER ('mqm') DESCR ('Allow admin as MQ-admin') ACTION(REPLACE)

    * Developer authority records
    SET AUTHREC PRINCIPAL('app') OBJTYPE(QMGR) AUTHADD(CONNECT,INQ)
    SET AUTHREC PROFILE('DEV.**') PRINCIPAL('app') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
    SET AUTHREC PROFILE('DEV.**') PRINCIPAL('app') OBJTYPE(TOPIC) AUTHADD(PUB,SUB)
    SET AUTHREC PROFILE('DEV.APP.MODEL.QUEUE') PRINCIPAL('app') OBJTYPE(QUEUE) AUTHADD(BROWSE,DSP,GET,INQ,PUT)
    
  tls.ini: |
    Service:
        Name=AuthorizationService
        EntryPoints=14
        SecurityPolicy=UserExternal
    SSL:
        AllowTLSV13=TRUE
        OutboundSNI=HOSTNAME
        ClientRevocationChecks=DISABLED
        OCSPAuthentication=OPTIONAL
        OCSPCheckExtensions=NO
    
   
    
