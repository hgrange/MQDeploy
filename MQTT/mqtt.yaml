apiVersion: v1
kind: ConfigMap
metadata:
  name: mqtt-config
  namespace: NAMESPACE
data:
  script.mqsc: | 
    DEF SERVICE(SYSTEM.MQXR.SERVICE) +
    CONTROL(QMGR) +
    DESCR('Manages clients using MQXR protocols such as MQTT') SERVTYPE(SERVER) +
    STARTCMD('+MQ_INSTALL_PATH+/mqxr/bin/runMQXRService.sh') +
    STARTARG('-m +QMNAME+ -d "+MQ_Q_MGR_DATA_PATH+" -g "+MQ_DATA_PATH+" -sf "[DEFAULT]"') +
    STOPCMD('+MQ_INSTALL_PATH+/mqxr/bin/endMQXRService.sh') +
    STOPARG('-m +QMNAME+ -d "+MQ_Q_MGR_DATA_PATH+" -g "+MQ_DATA_PATH+"') +
    STDOUT('+MQ_Q_MGR_DATA_PATH+/mqxr.stdout') +
    STDERR('+MQ_Q_MGR_DATA_PATH+/mqxr.stderr')
    
    DEFINE QLOCAL('SYSTEM.MQTT.TRANSMIT.QUEUE') USAGE(XMITQ) MAXDEPTH(100000)
    ALTER QMGR DEFXMITQ('SYSTEM.MQTT.TRANSMIT.QUEUE')
    SET AUTHREC PROFILE(SYSTEM.MQTT.TRANSMIT.QUEUE)  PRINCIPAL('mqtt') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    START SERVICE(SYSTEM.MQXR.SERVICE)
    
    DEFINE CHANNEL('MQTT') CHLTYPE(MQTT) PORT(1833) MCAUSER('mqtt')
    START CHANNEL('MQTT')

    DEFINE TOPIC(MQTT) TOPICSTR('#')  PUB(ENABLED) SUB(ENABLED)
    SET AUTHREC PROFILE(MQTT) PRINCIPAL('mqtt') OBJTYPE(TOPIC) AUTHADD(PUB,SUB)
    DEF QL(TO.KAFKA)
    DEFINE SUB(TO.KAFKA) DEST(TO.KAFKA) TOPICOBJ(MQTT) LIKE(SYSTEM.DEFAULT.SUB)
    
    DEFINE CHANNEL (APP1.CHAN) CHLTYPE (SVRCONN) TRPTYPE (TCP) SSLCAUTH(REQUIRED)  SSLCIPH('ANY_TLS13_OR_HIGHER') REPLACE
    SET CHLAUTH('APP1.CHAN') TYPE(SSLPEERMAP) SSLPEER('CN=*') USERSRC(NOACCESS) ACTION(REPLACE)
    SET CHLAUTH('APP1.CHAN') TYPE(SSLPEERMAP) SSLPEER('CN=app1') USERSRC(MAP) MCAUSER('app1') ACTION(REPLACE)
    SET CHLAUTH('APP1.CHAN') TYPE(SSLPEERMAP) SSLPEER('CN=MQTT') USERSRC(MAP) MCAUSER('app1') ACTION(REPLACE)
    
    DEFINE CHANNEL (KAFKA.SVRCONN) CHLTYPE (SVRCONN) TRPTYPE (TCP) SSLCAUTH(OPTIONAL) MCAUSER('kafka')  REPLACE

    DEFINE CHANNEL (SYSTEMMQTTCHL) CHLTYPE (SVRCONN) TRPTYPE (TCP) SSLCAUTH(REQUIRED)  SSLCIPH('ANY_TLS13_OR_HIGHER') REPLACE
    SET CHLAUTH('SYSTEMMQTTCHL') TYPE(SSLPEERMAP) SSLPEER('CN=*') USERSRC(NOACCESS) ACTION(REPLACE)
    SET CHLAUTH('SYSTEMMQTTCHL') TYPE(SSLPEERMAP) SSLPEER('CN=mqm') USERSRC(MAP) MCAUSER('mqm') ACTION(REPLACE)

    DEF QL(Q1)
    DEF QL(Q2)
    DEF QL(FROM.KAFKA)

    SET AUTHREC PRINCIPAL('app1') OBJTYPE(QMGR) AUTHADD(CONNECT,INQ)
    SET AUTHREC PROFILE(Q1) PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    SET AUTHREC PROFILE(Q2) PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    SET AUTHREC PROFILE(TO.KAFKA) PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    SET AUTHREC PROFILE(FROM.KAFKA) PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    
    SET AUTHREC PRINCIPAL('kafka') OBJTYPE(QMGR) AUTHADD(CONNECT,INQ)
    SET AUTHREC PROFILE(TO.KAFKA) PRINCIPAL('kafka') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    SET AUTHREC PROFILE(FROM.KAFKA) PRINCIPAL('kafka') OBJTYPE(QUEUE) AUTHADD(PUT,GET,INQ,BROWSE)
    REFRESH SECURITY
  tls.ini: |
    Service:
        Name=AuthorizationService
        EntryPoints=14
        SecurityPolicy=UserExternal
    SSL:
        AllowTLSV13=TRUE
        OutboundSNI=HOSTNAME
        ClientRevocationChecks=DISABLED
        OCSPAuthentication=OPTIONAL
        OCSPCheckExtensions=NO
    
   
    
